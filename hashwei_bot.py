import os
import time
import schedule
import requests
from datetime import datetime
import pytz
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import io
import base64
from PIL import Image

class HashweiTelegramBot:
    def __init__(self):
        self.bot_token = "8372904645:AAFso89K2UabIdYZ2HZrRGhV8xD41kmaZWA"
        self.group_id = "-1002845367780"
        self.hashwei_url = "https://hashwei.ai/dashboard/cvd"
        self.driver = None
        self.vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        
    def setup_driver(self):
        """Thi·∫øt l·∫≠p Chrome driver v·ªõi c√°c options ph√π h·ª£p cho Render"""
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--disable-web-security')
        chrome_options.add_argument('--allow-running-insecure-content')
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-plugins')
        chrome_options.add_argument('--disable-images')  # T·∫Øt load ·∫£nh ƒë·ªÉ tƒÉng t·ªëc
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.set_page_load_timeout(60)
            print("‚úÖ Chrome driver ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói thi·∫øt l·∫≠p driver: {e}")
            return False
    
    def wait_for_element(self, by, value, timeout=30):
        """Ch·ªù element xu·∫•t hi·ªán"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, value))
            )
            return element
        except TimeoutException:
            print(f"‚è∞ Timeout ch·ªù element: {value}")
            return None
    
    def wait_for_clickable(self, by, value, timeout=30):
        """Ch·ªù element c√≥ th·ªÉ click"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.element_to_be_clickable((by, value))
            )
            return element
        except TimeoutException:
            print(f"‚è∞ Timeout ch·ªù clickable element: {value}")
            return None
    
    def navigate_to_hashwei(self):
        """ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang Hashwei"""
        try:
            print("üåê ƒêang truy c·∫≠p Hashwei...")
            self.driver.get(self.hashwei_url)
            
            # Ch·ªù trang load
            time.sleep(10)
            
            # Ki·ªÉm tra xem c√≥ c·∫ßn ƒëƒÉng nh·∫≠p kh√¥ng
            if "login" in self.driver.current_url.lower():
                print("üîê C·∫ßn ƒëƒÉng nh·∫≠p...")
                time.sleep(5)  # Ch·ªù form ƒëƒÉng nh·∫≠p load
            
            # Ch·ªù dashboard load ho√†n t·∫•t
            print("‚è≥ Ch·ªù dashboard load...")
            time.sleep(15)
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi truy c·∫≠p Hashwei: {e}")
            return False
    
    def navigate_to_cvd_section(self):
        """ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn ph·∫ßn CVD"""
        try:
            print("üìä ƒêang ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn ph·∫ßn CVD...")
            
            # T√¨m v√† click Data Off Chain
            data_offchain_selectors = [
                "//a[contains(text(), 'Data Off Chain')]",
                "//button[contains(text(), 'Data Off Chain')]",
                "//div[contains(text(), 'Data Off Chain')]",
                "[data-testid*='offchain']",
                ".menu-item:contains('Data Off Chain')",
                "*[title*='Data Off Chain']"
            ]
            
            data_offchain_clicked = False
            for selector in data_offchain_selectors:
                try:
                    if selector.startswith("//"):
                        element = self.driver.find_element(By.XPATH, selector)
                    else:
                        element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if element.is_displayed():
                        element.click()
                        print("‚úÖ ƒê√£ click Data Off Chain")
                        data_offchain_clicked = True
                        time.sleep(5)
                        break
                except:
                    continue
            
            if not data_offchain_clicked:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Data Off Chain, ti·∫øp t·ª•c...")
            
            # T√¨m v√† click OrderFlow Heatmap
            heatmap_selectors = [
                "//a[contains(text(), 'OrderFlow') or contains(text(), 'Heatmap')]",
                "//button[contains(text(), 'OrderFlow') or contains(text(), 'Heatmap')]",
                "[data-testid*='heatmap']",
                ".menu-item:contains('Heatmap')",
                "*[title*='Heatmap']"
            ]
            
            heatmap_clicked = False
            for selector in heatmap_selectors:
                try:
                    if selector.startswith("//"):
                        element = self.driver.find_element(By.XPATH, selector)
                    else:
                        element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if element.is_displayed():
                        element.click()
                        print("‚úÖ ƒê√£ click OrderFlow Heatmap")
                        heatmap_clicked = True
                        time.sleep(5)
                        break
                except:
                    continue
            
            if not heatmap_clicked:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y OrderFlow Heatmap, ti·∫øp t·ª•c...")
            
            # T√¨m v√† click Absolute CVD
            cvd_selectors = [
                "//a[contains(text(), 'Absolute CVD') or contains(text(), 'CVD')]",
                "//button[contains(text(), 'Absolute CVD') or contains(text(), 'CVD')]",
                "[data-testid*='cvd']",
                ".menu-item:contains('CVD')",
                "*[title*='CVD']"
            ]
            
            for selector in cvd_selectors:
                try:
                    if selector.startswith("//"):
                        element = self.driver.find_element(By.XPATH, selector)
                    else:
                        element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if element.is_displayed():
                        element.click()
                        print("‚úÖ ƒê√£ click Absolute CVD")
                        time.sleep(10)  # Ch·ªù CVD load
                        break
                except:
                    continue
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn CVD: {e}")
            return False
    
    def select_ticker_and_capture(self, ticker):
        """Ch·ªçn ticker v√† ch·ª•p m√†n h√¨nh"""
        try:
            print(f"üéØ ƒêang ch·ªçn ticker: {ticker}")
            
            # T√¨m v√† click ticker
            ticker_selectors = [
                f"//button[contains(text(), '{ticker}')]",
                f"//div[contains(text(), '{ticker}')]",
                f"//option[contains(text(), '{ticker}')]",
                f"[data-value='{ticker}']",
                f"[value='{ticker}']",
                f".ticker-option:contains('{ticker}')"
            ]
            
            ticker_selected = False
            for selector in ticker_selectors:
                try:
                    if selector.startswith("//"):
                        element = self.driver.find_element(By.XPATH, selector)
                    else:
                        element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if element.is_displayed():
                        element.click()
                        print(f"‚úÖ ƒê√£ ch·ªçn {ticker}")
                        ticker_selected = True
                        time.sleep(8)  # Ch·ªù data load
                        break
                except:
                    continue
            
            if not ticker_selected:
                # Th·ª≠ t√¨m dropdown/select ƒë·ªÉ ch·ªçn ticker
                try:
                    dropdown_selectors = [
                        "//select",
                        ".dropdown",
                        ".select",
                        "[role='combobox']"
                    ]
                    
                    for dropdown_selector in dropdown_selectors:
                        try:
                            if dropdown_selector.startswith("//"):
                                dropdown = self.driver.find_element(By.XPATH, dropdown_selector)
                            else:
                                dropdown = self.driver.find_element(By.CSS_SELECTOR, dropdown_selector)
                            
                            dropdown.click()
                            time.sleep(2)
                            
                            # T√¨m option v·ªõi ticker
                            option = self.driver.find_element(By.XPATH, f"//option[contains(text(), '{ticker}')]")
                            option.click()
                            print(f"‚úÖ ƒê√£ ch·ªçn {ticker} t·ª´ dropdown")
                            ticker_selected = True
                            time.sleep(8)
                            break
                        except:
                            continue
                except:
                    pass
            
            if not ticker_selected:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ticker {ticker}, s·∫Ω ch·ª•p m√†n h√¨nh hi·ªán t·∫°i")
            
            # Ch·ªù th√™m ƒë·ªÉ ƒë·∫£m b·∫£o data ƒë√£ load
            time.sleep(5)
            
            # Ch·ª•p m√†n h√¨nh
            screenshot = self.driver.get_screenshot_as_png()
            
            return screenshot
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ch·ªçn ticker {ticker}: {e}")
            return None
    
    def send_telegram_photo(self, photo_data, caption):
        """G·ª≠i ·∫£nh l√™n Telegram"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendPhoto"
            
            files = {
                'photo': ('screenshot.png', photo_data, 'image/png')
            }
            
            data = {
                'chat_id': self.group_id,
                'caption': caption,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, files=files, data=data, timeout=30)
            
            if response.status_code == 200:
                print("‚úÖ ƒê√£ g·ª≠i ·∫£nh l√™n Telegram th√†nh c√¥ng")
                return True
            else:
                print(f"‚ùå L·ªói g·ª≠i ·∫£nh: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i Telegram: {e}")
            return False
    
    def get_vietnam_time(self):
        """L·∫•y th·ªùi gian Vi·ªát Nam"""
        return datetime.now(self.vietnam_tz).strftime("%d/%m/%Y %H:%M:%S")
    
    def scan_and_post(self):
        """Th·ª±c hi·ªán scan v√† ƒëƒÉng b√†i"""
        try:
            print(f"üöÄ B·∫Øt ƒë·∫ßu scan l√∫c: {self.get_vietnam_time()}")
            
            # Setup driver
            if not self.setup_driver():
                return False
            
            # Truy c·∫≠p Hashwei
            if not self.navigate_to_hashwei():
                return False
            
            # ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn CVD
            if not self.navigate_to_cvd_section():
                return False
            
            # Scan BTCUSDT
            print("üì∏ ƒêang scan BTCUSDT...")
            btc_screenshot = self.select_ticker_and_capture("BTCUSDT")
            
            if btc_screenshot:
                btc_caption = f"""
ü™ô <b>Coin:</b> BTCUSDT
‚è∞ <b>Th·ªùi gian c·∫≠p nh·∫≠t:</b> {self.get_vietnam_time()}
üìä <b>D·ªØ li·ªáu:</b> Hashwei CVD Heatmap

#BTCUSDT #Hashwei #CVD
"""
                self.send_telegram_photo(btc_screenshot, btc_caption)
                time.sleep(3)  # Ch·ªù gi·ªØa c√°c l·∫ßn g·ª≠i
            
            # Scan ETHUSDT
            print("üì∏ ƒêang scan ETHUSDT...")
            eth_screenshot = self.select_ticker_and_capture("ETHUSDT")
            
            if eth_screenshot:
                eth_caption = f"""
ü™ô <b>Coin:</b> ETHUSDT
‚è∞ <b>Th·ªùi gian c·∫≠p nh·∫≠t:</b> {self.get_vietnam_time()}
üìä <b>D·ªØ li·ªáu:</b> Hashwei CVD Heatmap

#ETHUSDT #Hashwei #CVD
"""
                self.send_telegram_photo(eth_screenshot, eth_caption)
            
            print("‚úÖ Ho√†n th√†nh scan!")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh scan: {e}")
            return False
            
        finally:
            # ƒê√≥ng driver
            if self.driver:
                self.driver.quit()
                self.driver = None
    
    def start_bot(self):
        """Kh·ªüi ƒë·ªông bot"""
        print("ü§ñ Kh·ªüi ƒë·ªông Hashwei Telegram Bot...")
        print(f"‚è∞ Bot s·∫Ω scan m·ªói gi·ªù, b·∫Øt ƒë·∫ßu t·ª´: {self.get_vietnam_time()}")
        
        # Ch·∫°y l·∫ßn ƒë·∫ßu ngay l·∫≠p t·ª©c
        self.scan_and_post()
        
        # L√™n l·ªãch ch·∫°y m·ªói gi·ªù
        schedule.every().hour.at(":00").do(self.scan_and_post)
        
        print("‚è∞ Bot ƒëang ch·∫°y, s·∫Ω scan m·ªói gi·ªù...")
        print("üõë Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng bot")
        
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)  # Ki·ªÉm tra m·ªói ph√∫t
            except KeyboardInterrupt:
                print("üõë Bot ƒë√£ ƒë∆∞·ª£c d·ª´ng!")
                if self.driver:
                    self.driver.quit()
                break
            except Exception as e:
                print(f"‚ùå L·ªói trong v√≤ng l·∫∑p ch√≠nh: {e}")
                time.sleep(300)  # Ch·ªù 5 ph√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i

if __name__ == "__main__":
    bot = HashweiTelegramBot()
    bot.start_bot()
